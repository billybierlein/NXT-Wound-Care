import React, { useState, useEffect } from "react";
import { Calculator, DollarSign, TrendingUp, FileText, Download } from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import jsPDF from 'jspdf';

// Graft options with ASP pricing
const graftOptions = [
  { name: "Membrane Wrap", asp: 1190.44, qCode: "Q4205" },
  { name: "Dermabind Q2", asp: 3337.23, qCode: "Q4313" },
  { name: "Dermabind Q3", asp: 3520.69, qCode: "Q4313" },
  { name: "AmchoPlast", asp: 4415.97, qCode: "Q4168" },
  { name: "AxoGuard", asp: 2850.00, qCode: "Q4210" },
  { name: "BioWound", asp: 2225.50, qCode: "Q4217" },
  { name: "FlexHD", asp: 3890.25, qCode: "Q4128" },
  { name: "GraftJacket", asp: 4200.75, qCode: "Q4107" },
  { name: "Integra", asp: 2975.80, qCode: "Q4104" },
  { name: "PriMatrix", asp: 1850.30, qCode: "Q4110" }
];

export default function PublicCalculator() {
  const [selectedGraft, setSelectedGraft] = useState<string>("");
  const [woundSize, setWoundSize] = useState<string>("");
  const [treatmentCount, setTreatmentCount] = useState<string>("1");
  const [closureRate, setClosureRate] = useState<string>("85");
  const [billingFee, setBillingFee] = useState<string>("6");

  // Calculated values
  const [totalBillable, setTotalBillable] = useState<number>(0);
  const [providerInvoice, setProviderInvoice] = useState<number>(0);
  const [grossProfit, setGrossProfit] = useState<number>(0);
  const [billingFeeAmount, setBillingFeeAmount] = useState<number>(0);
  const [netProfit, setNetProfit] = useState<number>(0);

  // Update calculations when inputs change
  useEffect(() => {
    if (selectedGraft && woundSize && treatmentCount) {
      const graft = graftOptions.find(g => g.name === selectedGraft);
      if (graft) {
        const size = parseFloat(woundSize) || 0;
        const count = parseInt(treatmentCount) || 0;
        const rate = parseFloat(closureRate) || 0;
        const feePercent = parseFloat(billingFee) || 0;

        const billable = graft.asp * size * count;
        const invoice = billable * 0.60;
        const gross = invoice * (rate / 100);
        const feeAmount = billable * (feePercent / 100);
        const net = gross - feeAmount;

        setTotalBillable(billable);
        setProviderInvoice(invoice);
        setGrossProfit(gross);
        setBillingFeeAmount(feeAmount);
        setNetProfit(net);
      }
    }
  }, [selectedGraft, woundSize, treatmentCount, closureRate, billingFee]);

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    const graft = graftOptions.find(g => g.name === selectedGraft);
    
    // Header
    doc.setFontSize(20);
    doc.text('Provider Revenue Calculator', 20, 30);
    doc.setFontSize(12);
    doc.text('Wound Care Treatment Revenue Analysis', 20, 40);
    
    // Input Parameters
    doc.setFontSize(14);
    doc.text('Treatment Parameters:', 20, 60);
    doc.setFontSize(11);
    doc.text(`Graft Product: ${selectedGraft} (${graft?.qCode})`, 25, 75);
    doc.text(`ASP Price per sq cm: ${formatCurrency(graft?.asp || 0)}`, 25, 85);
    doc.text(`Wound Size: ${woundSize} sq cm`, 25, 95);
    doc.text(`Number of Treatments: ${treatmentCount}`, 25, 105);
    doc.text(`Expected Closure Rate: ${closureRate}%`, 25, 115);
    doc.text(`Practice Billing Fee: ${billingFee}%`, 25, 125);
    
    // Financial Summary
    doc.setFontSize(14);
    doc.text('Financial Analysis:', 20, 145);
    doc.setFontSize(11);
    doc.text(`Total Billable Amount: ${formatCurrency(totalBillable)}`, 25, 160);
    doc.text(`Provider Invoice (60%): ${formatCurrency(providerInvoice)}`, 25, 170);
    doc.text(`Gross Clinic Profit: ${formatCurrency(grossProfit)}`, 25, 180);
    doc.text(`Practice Billing Fee: -${formatCurrency(billingFeeAmount)}`, 25, 190);
    doc.text(`Net Clinic Profit: ${formatCurrency(netProfit)}`, 25, 200);
    
    // Footer
    doc.setFontSize(10);
    doc.text('Generated by NXT Medical WoundCare Revenue Calculator', 20, 280);
    doc.text(`Report generated on ${new Date().toLocaleDateString()}`, 20, 290);
    
    doc.save(`provider-revenue-analysis-${new Date().toISOString().split('T')[0]}.pdf`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-4 py-6">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
              <Calculator className="h-6 w-6 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Provider Revenue Calculator</h1>
              <p className="text-gray-600">Calculate potential revenue from wound care treatments</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Input Form */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Treatment Parameters
                </CardTitle>
                <CardDescription>
                  Enter treatment details to calculate potential revenue
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="graft">Graft Product *</Label>
                  <Select value={selectedGraft} onValueChange={setSelectedGraft}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select graft product" />
                    </SelectTrigger>
                    <SelectContent>
                      {graftOptions.map((graft) => (
                        <SelectItem key={graft.name} value={graft.name}>
                          {graft.name} - {formatCurrency(graft.asp)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="woundSize">Wound Size (sq cm) *</Label>
                  <Input
                    id="woundSize"
                    type="number"
                    placeholder="12"
                    value={woundSize}
                    onChange={(e) => setWoundSize(e.target.value)}
                    min="0"
                    step="0.1"
                  />
                </div>

                <div>
                  <Label htmlFor="treatmentCount">Number of Treatments</Label>
                  <Input
                    id="treatmentCount"
                    type="number"
                    placeholder="1"
                    value={treatmentCount}
                    onChange={(e) => setTreatmentCount(e.target.value)}
                    min="1"
                  />
                </div>

                <div>
                  <Label htmlFor="closureRate">Expected Closure Rate (%)</Label>
                  <Select value={closureRate} onValueChange={setClosureRate}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="70">70% - Conservative</SelectItem>
                      <SelectItem value="80">80% - Moderate</SelectItem>
                      <SelectItem value="85">85% - Expected</SelectItem>
                      <SelectItem value="90">90% - Optimistic</SelectItem>
                      <SelectItem value="95">95% - Best Case</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="billingFee">Practice Billing Fee (%)</Label>
                  <Input
                    id="billingFee"
                    type="number"
                    value={billingFee}
                    onChange={(e) => setBillingFee(e.target.value)}
                    min="0"
                    max="20"
                    step="0.1"
                  />
                </div>

                <Button 
                  onClick={generatePDF} 
                  className="w-full"
                  disabled={!selectedGraft || !woundSize}
                >
                  <Download className="h-4 w-4 mr-2" />
                  Export PDF Report
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Results */}
          <div className="lg:col-span-2">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
              <Card className="border-blue-200 bg-blue-50">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-blue-700">Total Billable</p>
                      <p className="text-2xl font-bold text-blue-900">
                        {formatCurrency(totalBillable)}
                      </p>
                    </div>
                    <DollarSign className="h-8 w-8 text-blue-600" />
                  </div>
                </CardContent>
              </Card>

              <Card className="border-purple-200 bg-purple-50">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-purple-700">Provider Invoice (60%)</p>
                      <p className="text-2xl font-bold text-purple-900">
                        {formatCurrency(providerInvoice)}
                      </p>
                    </div>
                    <FileText className="h-8 w-8 text-purple-600" />
                  </div>
                </CardContent>
              </Card>

              <Card className="border-orange-200 bg-orange-50">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-orange-700">Gross Clinic Profit</p>
                      <p className="text-2xl font-bold text-orange-900">
                        {formatCurrency(grossProfit)}
                      </p>
                    </div>
                    <TrendingUp className="h-8 w-8 text-orange-600" />
                  </div>
                </CardContent>
              </Card>

              <Card className="border-red-200 bg-red-50">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-red-700">Billing Fee</p>
                      <p className="text-2xl font-bold text-red-900">
                        -{formatCurrency(billingFeeAmount)}
                      </p>
                    </div>
                    <DollarSign className="h-8 w-8 text-red-600" />
                  </div>
                </CardContent>
              </Card>

              <Card className="border-green-200 bg-green-50 md:col-span-2">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-green-700">Net Clinic Profit</p>
                      <p className="text-3xl font-bold text-green-900">
                        {formatCurrency(netProfit)}
                      </p>
                    </div>
                    <TrendingUp className="h-10 w-10 text-green-600" />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Revenue Model Explanation */}
            <Card>
              <CardHeader>
                <CardTitle>Revenue Model Explanation</CardTitle>
                <CardDescription>
                  Understanding the wound care revenue calculation
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-2">How It Works</h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      <li>• Total Billable = ASP Price × Wound Size × Treatments</li>
                      <li>• Provider Invoice = 60% of Total Billable</li>
                      <li>• Gross Profit = Invoice × Closure Rate</li>
                      <li>• Net Profit = Gross Profit - Billing Fees</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-2">Key Benefits</h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      <li>• Predictable revenue stream</li>
                      <li>• Improved patient outcomes</li>
                      <li>• Advanced wound care capabilities</li>
                      <li>• Insurance reimbursement support</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}